#!/bin/bash
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

# test "" = "$(grep '^Signed-off-by: ' "$1" |
# 	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
# 	echo >&2 Duplicate Signed-off-by lines.
# 	exit 1
# }


COMMIT_MSG_FILE="$1"
CURRENT_MSG=$(cat "$COMMIT_MSG_FILE")
AUTOCOMMIT_DIR=$(dirname "$(dirname "$(command -v autocommit)")")
SCRIPT_DIR="$AUTOCOMMIT_DIR/message_gen/src"

# echo "$COMMIT_MSG_FILE", "$SCRIPT_DIR", "$AUTOCOMMIT_DIR"
# check if force flag is present. TODO make this an actual flag, instead of a part of the commit message

if echo "$CURRENT_MSG" | grep -q -- "--force-msg"; then
    CURRENT_MSG=$(echo "$CURRENT_MSG" | sed 's/--force-msg//g')
    echo "$CURRENT_MSG" > "$COMMIT_MSG_FILE"
    exit 0
fi

git diff --cached > /tmp/git_diff.txt

NEW_MSG="$(autocommit --diff /tmp/git_diff.txt --old "$CURRENT_MSG")"

if [[ $? -ne 0 ]]; then
    # echo "Error: Message generation failed." >&2
    exit 1
fi

echo new commit message: "$NEW_MSG"

if [[ -n "$NEW_MSG" ]]; then
	echo -e "$NEW_MSG" > "$COMMIT_MSG_FILE"
else
	echo "Error: Failed to generate a commit message." >&2
	exit 1
fi

exit 0
