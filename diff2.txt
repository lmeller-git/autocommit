diff --git a/commit_processing/Cargo.toml b/commit_processing/Cargo.toml
deleted file mode 100644
index 83f30b0..0000000
--- a/commit_processing/Cargo.toml
+++ /dev/null
@@ -1,9 +0,0 @@
-[package]
-name = "commit_processing"
-version = "0.1.0"
-edition = "2021"
-
-[dependencies]
-clap = { version = "4.5.28", features = ["derive"] }
-pyo3 = { version = "0.23.4", features = ["extension-module"] }
-thiserror = "2.0.11"
diff --git a/commit_processing/src/lib.rs b/commit_processing/src/lib.rs
deleted file mode 100644
index 3af6d07..0000000
--- a/commit_processing/src/lib.rs
+++ /dev/null
@@ -1,33 +0,0 @@
-use std::path::PathBuf;
-
-use pyo3::prelude::*;
-use thiserror::Error;
-mod parse;
-
-pub type Result<'a, T> = std::result::Result<T, ParseDiffError>;
-
-#[derive(Error, Debug)]
-pub enum ParseDiffError {
-    #[error("IO operation failed {0}")]
-    IOError(#[from] std::io::Error),
-    #[error("parsing of file {0} failed with")]
-    ParseError(#[from] parse::ParseError<'static>),
-}
-
-#[pyclass]
-#[derive(Default, Debug)]
-struct PyDiff {}
-
-#[pymodule]
-fn parse_diff(m: &Bound<'_, PyModule>) -> PyResult<()> {
-    m.add_function(wrap_pyfunction!(parse_diff_file, m)?)
-}
-#[pyfunction]
-fn parse_diff_file(diff: PathBuf) -> PyResult<Vec<PyDiff>> {
-    Ok(Vec::default())
-}
-
-#[cfg(test)]
-mod tests {
-    use super::*;
-}
diff --git a/commit_processing/src/parse/diff.rs b/commit_processing/src/parse/diff.rs
deleted file mode 100644
index c536f1b..0000000
--- a/commit_processing/src/parse/diff.rs
+++ /dev/null
@@ -1,30 +0,0 @@
-use std::path::Path;
-
-/// diff of a file
-#[derive(PartialEq, Eq, PartialOrd, Ord, Debug, Clone)]
-pub struct Diff<'a> {
-    path: &'a Path,
-    code: Vec<Modified<'a>>,
-}
-
-/// a modified block
-#[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Clone)]
-pub struct Modified<'a> {
-    old: &'a str,
-    new: &'a str,
-}
-
-impl<'a> Diff<'a> {
-    pub fn new(p: &'a Path) -> Self {
-        Self {
-            path: p,
-            code: Vec::new(),
-        }
-    }
-}
-
-impl<'a> Modified<'a> {
-    fn new(old: &'a str, new: &'a str) -> Self {
-        Self { old, new }
-    }
-}
diff --git a/commit_processing/src/parse/mod.rs b/commit_processing/src/parse/mod.rs
deleted file mode 100644
index fc89a52..0000000
--- a/commit_processing/src/parse/mod.rs
+++ /dev/null
@@ -1,20 +0,0 @@
-pub mod diff;
-pub mod parse_diff;
-use diff::Diff;
-use thiserror::Error;
-
-pub type Result<'a, T> = std::result::Result<T, ParseError<'a>>;
-
-#[derive(Error, Debug)]
-pub enum ParseError<'a> {
-    #[error("cannot parse from {0}")]
-    BadStr(&'a str),
-}
-
-pub fn parse_diff<'a>(diff: &'a str) -> Result<Vec<Diff<'a>>> {
-    let mut diffs = Vec::new();
-    for d in diff.split('@') {
-        diffs.push(d.parse::<Diff>()?);
-    }
-    Ok(diffs)
-}
diff --git a/commit_processing/src/parse/parse_diff.rs b/commit_processing/src/parse/parse_diff.rs
deleted file mode 100644
index c396509..0000000
--- a/commit_processing/src/parse/parse_diff.rs
+++ /dev/null
@@ -1,20 +0,0 @@
-use std::str::FromStr;
-
-use super::{
-    diff::{Diff, Modified},
-    ParseError,
-};
-
-impl<'a> FromStr for Diff<'a> {
-    type Err = ParseError<'a>;
-    fn from_str(s: &str) -> Result<Self, Self::Err> {
-        todo!()
-    }
-}
-
-impl<'a> FromStr for Modified<'a> {
-    type Err = ParseError<'a>;
-    fn from_str(s: &str) -> Result<Self, Self::Err> {
-        todo!()
-    }
-}
diff --git a/diff.txt b/diff.txt
new file mode 100644
index 0000000..2b155db
--- /dev/null
+++ b/diff.txt
@@ -0,0 +1,71 @@
+diff --git a/message_gen/src/gen/msg.py b/message_gen/src/gen/msg.py
+index a9f1dcd..b1d2217 100644
+--- a/message_gen/src/gen/msg.py
++++ b/message_gen/src/gen/msg.py
+@@ -1,17 +1,39 @@
+ from parse.diff import Diff
+ from huggingface_hub import InferenceClient
+ 
+-client = InferenceClient("mistralai/Mistral-7B-Instruct-v0.1")
++client = InferenceClient("meta-llama/Meta-Llama-3-8B-Instruct")
+ 
++def summarize(diffs: list[Diff], original: str) -> str:
++	messages = [
++		{
++			"role": "system",
++			"content": "You are a llm model, which summarizes git diffs and condenses these into short commit messages.\
++						You will work with the original commit messages and a simplified git diff to generate the new message.\
++						The commit messages should follow this template:\
++						[<type>]<changes>\
++						where type is bugfix | fix | optimization | chore | docs | feature and should reflect the changes which were done.\
++						changes should be one sentence summarizing the most important changes\
++						ex: [docs] added docs in file x for function y\
++						this should be encased in {<commit msg>}\
++						ex: {[docs] added docs in file x for function y}"
++		},
++		{
++			"role": "user",
++			"content": "\n".join([str(diff) for diff in diffs])
++		}
++	]
++	stream = client.chat.completions.create(
++		messages = messages,
++		max_tokens = 20,
++		stream = True
++	)
++	msg = "".join([chunk.choices[0].delta.content for chunk in stream])
++	msg = msg.split("{")[1].split("}")[0]
++	return msg
+ 
+-def gen_msg(diffs: list[Diff]):
+-    r = str(diffs[0])
+-    r = [
+-        {
+-            "role": "system",
+-            "message": "you are a llm, which condenses git diffs into commit messages",
+-        },
+-        {"role": "user", "message": r},
+-    ]
+-    print(client.chat_completion(r))
+-    pass
++def gen_msg(diffs: list[Diff], original: str) -> str:
++	summ = summarize(diffs, original)
++	msg = summ + " (generated)" + "\noriginal: " + original
++	return msg
++	
++	
+diff --git a/message_gen/src/main.py b/message_gen/src/main.py
+index 3acab33..24a6409 100644
+--- a/message_gen/src/main.py
++++ b/message_gen/src/main.py
+@@ -14,8 +14,8 @@ def parse_args() -> argparse.Namespace:
+ def main() -> None:
+     path = parse_args()
+     diffs = parse_diff(path.diff_file)
+-    gen_msg(diffs)
+-
++    msg = gen_msg(diffs, "fixed stuff")
++    print(f"generated message:\n{msg}")
+ 
+ if __name__ == "__main__":
+     main()
diff --git a/message_gen/src/diff.txt b/message_gen/src/diff.txt
deleted file mode 100644
index 775ad8c..0000000
--- a/message_gen/src/diff.txt
+++ /dev/null
@@ -1,177 +0,0 @@
-diff --git a/commit_processing/Cargo.toml b/commit_processing/Cargo.toml
-index 2b69b76..83f30b0 100644
---- a/commit_processing/Cargo.toml
-+++ b/commit_processing/Cargo.toml
-@@ -5,3 +5,5 @@ edition = "2021"
- 
- [dependencies]
- clap = { version = "4.5.28", features = ["derive"] }
-+pyo3 = { version = "0.23.4", features = ["extension-module"] }
-+thiserror = "2.0.11"
-diff --git a/commit_processing/python_bindings/Cargo.toml b/commit_processing/python_bindings/Cargo.toml
-deleted file mode 100644
-index cfc6375..0000000
---- a/commit_processing/python_bindings/Cargo.toml
-+++ /dev/null
-@@ -1,7 +0,0 @@
--[package]
--name = "python_bindings"
--version = "0.1.0"
--edition = "2021"
--
--[dependencies]
--pyo3 = "0.23.4"
-diff --git a/commit_processing/python_bindings/src/lib.rs b/commit_processing/python_bindings/src/lib.rs
-deleted file mode 100644
-index b93cf3f..0000000
---- a/commit_processing/python_bindings/src/lib.rs
-+++ /dev/null
-@@ -1,14 +0,0 @@
--pub fn add(left: u64, right: u64) -> u64 {
--    left + right
--}
--
--#[cfg(test)]
--mod tests {
--    use super::*;
--
--    #[test]
--    fn it_works() {
--        let result = add(2, 2);
--        assert_eq!(result, 4);
--    }
--}
-diff --git a/commit_processing/src/lib.rs b/commit_processing/src/lib.rs
-index b93cf3f..3af6d07 100644
---- a/commit_processing/src/lib.rs
-+++ b/commit_processing/src/lib.rs
-@@ -1,14 +1,33 @@
--pub fn add(left: u64, right: u64) -> u64 {
--    left + right
-+use std::path::PathBuf;
-+
-+use pyo3::prelude::*;
-+use thiserror::Error;
-+mod parse;
-+
-+pub type Result<'a, T> = std::result::Result<T, ParseDiffError>;
-+
-+#[derive(Error, Debug)]
-+pub enum ParseDiffError {
-+    #[error("IO operation failed {0}")]
-+    IOError(#[from] std::io::Error),
-+    #[error("parsing of file {0} failed with")]
-+    ParseError(#[from] parse::ParseError<'static>),
-+}
-+
-+#[pyclass]
-+#[derive(Default, Debug)]
-+struct PyDiff {}
-+
-+#[pymodule]
-+fn parse_diff(m: &Bound<'_, PyModule>) -> PyResult<()> {
-+    m.add_function(wrap_pyfunction!(parse_diff_file, m)?)
-+}
-+#[pyfunction]
-+fn parse_diff_file(diff: PathBuf) -> PyResult<Vec<PyDiff>> {
-+    Ok(Vec::default())
- }
- 
- #[cfg(test)]
- mod tests {
-     use super::*;
--
--    #[test]
--    fn it_works() {
--        let result = add(2, 2);
--        assert_eq!(result, 4);
--    }
- }
-diff --git a/commit_processing/src/parse/diff.rs b/commit_processing/src/parse/diff.rs
-new file mode 100644
-index 0000000..c536f1b
---- /dev/null
-+++ b/commit_processing/src/parse/diff.rs
-@@ -0,0 +1,30 @@
-+use std::path::Path;
-+
-+/// diff of a file
-+#[derive(PartialEq, Eq, PartialOrd, Ord, Debug, Clone)]
-+pub struct Diff<'a> {
-+    path: &'a Path,
-+    code: Vec<Modified<'a>>,
-+}
-+
-+/// a modified block
-+#[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Clone)]
-+pub struct Modified<'a> {
-+    old: &'a str,
-+    new: &'a str,
-+}
-+
-+impl<'a> Diff<'a> {
-+    pub fn new(p: &'a Path) -> Self {
-+        Self {
-+            path: p,
-+            code: Vec::new(),
-+        }
-+    }
-+}
-+
-+impl<'a> Modified<'a> {
-+    fn new(old: &'a str, new: &'a str) -> Self {
-+        Self { old, new }
-+    }
-+}
-diff --git a/commit_processing/src/parse/mod.rs b/commit_processing/src/parse/mod.rs
-new file mode 100644
-index 0000000..fc89a52
---- /dev/null
-+++ b/commit_processing/src/parse/mod.rs
-@@ -0,0 +1,20 @@
-+pub mod diff;
-+pub mod parse_diff;
-+use diff::Diff;
-+use thiserror::Error;
-+
-+pub type Result<'a, T> = std::result::Result<T, ParseError<'a>>;
-+
-+#[derive(Error, Debug)]
-+pub enum ParseError<'a> {
-+    #[error("cannot parse from {0}")]
-+    BadStr(&'a str),
-+}
-+
-+pub fn parse_diff<'a>(diff: &'a str) -> Result<Vec<Diff<'a>>> {
-+    let mut diffs = Vec::new();
-+    for d in diff.split('@') {
-+        diffs.push(d.parse::<Diff>()?);
-+    }
-+    Ok(diffs)
-+}
-diff --git a/commit_processing/src/parse/parse_diff.rs b/commit_processing/src/parse/parse_diff.rs
-new file mode 100644
-index 0000000..c396509
---- /dev/null
-+++ b/commit_processing/src/parse/parse_diff.rs
-@@ -0,0 +1,20 @@
-+use std::str::FromStr;
-+
-+use super::{
-+    diff::{Diff, Modified},
-+    ParseError,
-+};
-+
-+impl<'a> FromStr for Diff<'a> {
-+    type Err = ParseError<'a>;
-+    fn from_str(s: &str) -> Result<Self, Self::Err> {
-+        todo!()
-+    }
-+}
-+
-+impl<'a> FromStr for Modified<'a> {
-+    type Err = ParseError<'a>;
-+    fn from_str(s: &str) -> Result<Self, Self::Err> {
-+        todo!()
-+    }
-+}
diff --git a/message_gen/src/gen/msg.py b/message_gen/src/gen/msg.py
index b1d2217..7982eb1 100644
--- a/message_gen/src/gen/msg.py
+++ b/message_gen/src/gen/msg.py
@@ -1,13 +1,10 @@
 from parse.diff import Diff
 from huggingface_hub import InferenceClient
+import re
 
 client = InferenceClient("meta-llama/Meta-Llama-3-8B-Instruct")
 
-def summarize(diffs: list[Diff], original: str) -> str:
-	messages = [
-		{
-			"role": "system",
-			"content": "You are a llm model, which summarizes git diffs and condenses these into short commit messages.\
+system_msg = "You are a llm model, which summarizes git diffs and condenses these into short commit messages.\
 						You will work with the original commit messages and a simplified git diff to generate the new message.\
 						The commit messages should follow this template:\
 						[<type>]<changes>\
@@ -15,20 +12,58 @@ def summarize(diffs: list[Diff], original: str) -> str:
 						changes should be one sentence summarizing the most important changes\
 						ex: [docs] added docs in file x for function y\
 						this should be encased in {<commit msg>}\
-						ex: {[docs] added docs in file x for function y}"
+						ex: {[docs] added docs in file x for function y}\
+						Return ONLY the commit message exactly in the format: {[<type>] <changes>}. The Curly Braces MUST be present.\
+						Examples:\
+Example 1:\
+Git diff:\
+--- a/file.py\
++++ b/file.py\
+@@ -1,4 +1,4 @@\
+- print('Hello World')\
++ print('Hello, LangChain')\
+Commit message: {[fix] updated greeting message in file.py}\
+\
+Example 2:\
+Git diff:\
+--- a/docs.md\
++++ b/docs.md\
+@@ -10,7 +10,7 @@\
+- Added basic usage instructions.\
++ Expanded usage instructions for clarity.\
+Commit message: {[docs] expanded usage instructions in docs.md}"
+
+
+# TODO: diff parsing: remove noise from diffs and highlight important changes
+#       model: look for different models, which might fit better
+#       model: try chain of thought like process: model1 summarizes the diff into key changes, model2 takes this summary to generate commit msg, ...
+#       model: tune hyperparameters
+
+def summarize(diffs: list[Diff], original: str) -> str:
+	messages = [
+		{
+			"role": "system",
+			"content": system_msg
 		},
 		{
 			"role": "user",
-			"content": "\n".join([str(diff) for diff in diffs])
+			"content": f"original: {original}\n" + "\n".join([str(diff) for diff in diffs])
 		}
 	]
+	# print("input: ", "\n".join([str(diff) for diff in diffs]))
 	stream = client.chat.completions.create(
 		messages = messages,
-		max_tokens = 20,
+		max_tokens = 200,
+		temperature = 0.2,
 		stream = True
 	)
 	msg = "".join([chunk.choices[0].delta.content for chunk in stream])
-	msg = msg.split("{")[1].split("}")[0]
+	# print("output: ", msg)
+	ismatch = re.search(r'\{(\[.*?\].*?)\}', msg)
+	if ismatch:
+			msg = ismatch.group(1)
+	else:
+		msg = msg.strip()	
 	return msg
 
 def gen_msg(diffs: list[Diff], original: str) -> str:
